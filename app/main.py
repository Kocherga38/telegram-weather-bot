import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.api import fetch_weather_data
from app.config import bot_settings as settings
from app.routers import router as location_router
from app.utils import weather_emojis

bot = Bot(
    token=settings.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()


async def send_weather_update(user_id: int) -> None:
    from app.storage import get_city

    city = await get_city(user_id)
    if not city:
        return

    data = await fetch_weather_data(settings.WEATHER_API_TOKEN, city=city)
    weather = data["weather"][0]
    emoji = weather_emojis.get(weather["main"].lower(), "‚ùì")

    text = (
        f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ <b>{city}</b>:\n\n"
        f"<blockquote>"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{data['main']['temp']}‚ÑÉ</b>\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{data['main']['feels_like']}‚ÑÉ</b>\n"
        f"{emoji} <b>{weather['description'].capitalize()}</b>\n"
        f"üí® –í–µ—Ç–µ—Ä: <b>{data['wind']['speed']} –º/—Å</b>"
        f"</blockquote>"
    )

    await bot.send_message(chat_id=user_id, text=text)


async def scheduled_weather_updates():
    from storage import get_all_users

    while True:
        try:
            users = await get_all_users()
            logging.info("–ü—Ä–æ—Ö–æ–∂—É—Å—å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            for user_id in users:
                await send_weather_update(user_id)
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            await asyncio.sleep(5)
        except Exception as error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {error}")
            await asyncio.sleep(60)


async def main() -> None:
    dp.include_router(
        location_router,
    )

    asyncio.create_task(scheduled_weather_updates())

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
